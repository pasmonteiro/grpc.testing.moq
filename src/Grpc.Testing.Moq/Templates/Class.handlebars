//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace {{namespaceName}}
{
    using System;
    using System.CodeDom.Compiler;
    using System.Linq;
    using System.Threading;
    using {{usingNamespace}};
    using global::Grpc.Core;
    using global::Grpc.Core.Testing;
    using Google.Api.Gax.Grpc.Testing;
    using Moq;

    [GeneratedCode("{{toolName}}", "{{toolVersion}}")]
    public static class {{className}}
    {
        public static Mock<{{grpcClient}}> GenerateMock() => new Mock<{{grpcClient}}>();
        {{#each methods}}
        {{#if isStream}}

        public static Mock<{{grpcClient}}> Setup{{name}}Call(this Mock<{{grpcClient}}> mock, params {{output.name}}[] response)
        {
            var adapter = new AsyncStreamAdapter<{{output.name}}>(response.ToAsyncEnumerable().GetAsyncEnumerator());
            var fakeCall = TestCalls.AsyncServerStreamingCall(adapter, System.Threading.Tasks.Task.FromResult(new Metadata()), () => Status.DefaultSuccess, () => new Metadata(), () => { });
            mock.Setup(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()))
                .Returns(fakeCall);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}Call(this Mock<{{grpcClient}}> mock, Func<{{input.name}}, {{output.name}}[]> valueFunction)
        {
            mock.Setup(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()))
                .Returns(({{input.name}} request, Metadata headers, System.DateTime? deadline, CancellationToken cancellationToken) =>
                {
                    var adapter = new AsyncStreamAdapter<{{output.name}}>(valueFunction(request).ToAsyncEnumerable().GetAsyncEnumerator());
                    return TestCalls.AsyncServerStreamingCall(adapter, System.Threading.Tasks.Task.FromResult(new Metadata()), () => Status.DefaultSuccess, () => new Metadata(), () => { });
                });
            return mock;
        }

        public static Moq.Language.ISetupSequentialResult<AsyncServerStreamingCall<{{output.name}}>> SetupSequence{{name}}Call(this Mock<{{grpcClient}}> mock)
        {
            return mock.SetupSequence(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()));
        }

        public static Mock<{{grpcClient}}> Setup{{name}}CallThrowsException(this Mock<{{grpcClient}}> mock, Exception exception = null)
        {
            if (exception == null) exception = new RpcException(Status.DefaultCancelled);
            mock.Setup(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()))
                .Throws(exception);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}CallWithCallOptions(this Mock<{{grpcClient}}> mock, params {{output.name}}[] response)
        {
            var adapter = new AsyncStreamAdapter<{{output.name}}>(response.ToAsyncEnumerable().GetAsyncEnumerator());
            var fakeCall = TestCalls.AsyncServerStreamingCall(adapter, System.Threading.Tasks.Task.FromResult(new Metadata()), () => Status.DefaultSuccess, () => new Metadata(), () => { });
            mock.Setup(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<CallOptions>()))
                .Returns(fakeCall);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}CallWithCallOptions(this Mock<{{grpcClient}}> mock, Func<{{input.name}}, {{output.name}}[]> valueFunction)
        {
            mock.Setup(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<CallOptions>()))
                .Returns(({{input.name}} request, CallOptions options) =>
                {
                    var adapter = new AsyncStreamAdapter<{{output.name}}>(valueFunction(request).ToAsyncEnumerable().GetAsyncEnumerator());
                    return TestCalls.AsyncServerStreamingCall(adapter, System.Threading.Tasks.Task.FromResult(new Metadata()), () => Status.DefaultSuccess, () => new Metadata(), () => { });
                });
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}CallThrowsExceptionWithCallOptions(this Mock<{{grpcClient}}> mock, Exception exception = null)
        {
            if (exception == null) exception = new RpcException(Status.DefaultCancelled);
            mock.Setup(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<CallOptions>()))
                .Throws(exception);
            return mock;
        }

        {{else}}

        public static Mock<{{grpcClient}}> Setup{{name}}AsyncCall(this Mock<{{grpcClient}}> mock, {{output.name}} response)
        {
            var fakeCall = TestCalls.AsyncUnaryCall(System.Threading.Tasks.Task.FromResult(response), System.Threading.Tasks.Task.FromResult(new Metadata()), () => Status.DefaultSuccess, () => new Metadata(), () => { });
            mock.Setup(_ => _.{{name}}Async(It.IsAny<{{input.name}}>(), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()))
                .Returns(fakeCall);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}AsyncCall(this Mock<{{grpcClient}}> mock, System.Func<{{input.name}}, {{output.name}}> valueFunction)
        {
            mock.Setup(_ => _.{{name}}Async(It.IsAny<{{input.name}}>(), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()))
                .Returns(({{input.name}} request, Metadata headers, System.DateTime? deadline, CancellationToken cancellationToken)
                    => TestCalls.AsyncUnaryCall(System.Threading.Tasks.Task.FromResult(valueFunction(request)), System.Threading.Tasks.Task.FromResult(new Metadata()), () => Status.DefaultSuccess, () => new Metadata(), () => { })
                );
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}AsyncCall(this Mock<{{grpcClient}}> mock, System.Linq.Expressions.Expression<System.Func<{{input.name}}, bool>> match, {{output.name}} response)
        {
            var fakeCall = TestCalls.AsyncUnaryCall(System.Threading.Tasks.Task.FromResult(response), System.Threading.Tasks.Task.FromResult(new Metadata()), () => Status.DefaultSuccess, () => new Metadata(), () => { });
            mock.Setup(_ => _.{{name}}Async(It.Is<{{input.name}}>(match), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()))
                .Returns(fakeCall);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}AsyncCallThrowsException(this Mock<{{grpcClient}}> mock, Exception exception = null)
        {
            if (exception is null) exception = new RpcException(Status.DefaultCancelled);
            mock.Setup(_ => _.{{name}}Async(It.IsAny<{{input.name}}>(), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()))
                .Throws(exception);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}AsyncCallWithCallOptions(this Mock<{{grpcClient}}> mock, {{output.name}} response)
        {
            var fakeCall = TestCalls.AsyncUnaryCall(System.Threading.Tasks.Task.FromResult(response), System.Threading.Tasks.Task.FromResult(new Metadata()), () => Status.DefaultSuccess, () => new Metadata(), () => { });
            mock.Setup(_ => _.{{name}}Async(It.IsAny<{{input.name}}>(), It.IsAny<CallOptions>()))
                .Returns(fakeCall);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}AsyncCallWithCallOptions(this Mock<{{grpcClient}}> mock, Func<{{input.name}}, {{output.name}}> valueFunction)
        {
            mock.Setup(_ => _.{{name}}Async(It.IsAny<{{input.name}}>(), It.IsAny<CallOptions>()))
                .Returns(({{input.name}} request, CallOptions options)
                    => TestCalls.AsyncUnaryCall(System.Threading.Tasks.Task.FromResult(valueFunction(request)), System.Threading.Tasks.Task.FromResult(new Metadata()), () => Status.DefaultSuccess, () => new Metadata(), () => { }));
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}AsyncCallWithCallOptions(this Mock<{{grpcClient}}> mock, System.Linq.Expressions.Expression<System.Func<{{input.name}}, bool>> match, {{output.name}} response)
        {
            var fakeCall = TestCalls.AsyncUnaryCall(System.Threading.Tasks.Task.FromResult(response), System.Threading.Tasks.Task.FromResult(new Metadata()), () => Status.DefaultSuccess, () => new Metadata(), () => { });
            mock.Setup(_ => _.{{name}}Async(It.Is<{{input.name}}>(match), It.IsAny<CallOptions>()))
                .Returns(fakeCall);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}AsyncCallThrowsExceptionWithCallOptions(this Mock<{{grpcClient}}> mock, Exception exception = null)
        {
            if (exception is null) exception = new RpcException(Status.DefaultCancelled);
            mock.Setup(_ => _.{{name}}Async(It.IsAny<{{input.name}}>(), It.IsAny<CallOptions>()))
                .Throws(exception);
            return mock;
        }

        public static Moq.Language.ISetupSequentialResult<AsyncUnaryCall<{{output.name}}>> SetupSequence{{name}}AsyncCall(this Mock<{{grpcClient}}> mock)
        {
            return mock.SetupSequence(_ => _.{{name}}Async(It.IsAny<{{input.name}}>(), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()));
        }

        public static Mock<{{grpcClient}}> Setup{{name}}Call(this Mock<{{grpcClient}}> mock, {{output.name}} response)
        {
            mock.Setup(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()))
                .Returns(response);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}Call(this Mock<{{grpcClient}}> mock, Func<{{input.name}}, {{output.name}}> valueFunction)
        {
            mock.Setup(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()))
                .Returns(({{input.name}} request, Metadata headers, System.DateTime? deadline, CancellationToken cancellationToken) => valueFunction(request));
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}Call(this Mock<{{grpcClient}}> mock, System.Linq.Expressions.Expression<System.Func<{{input.name}}, bool>> match, {{output.name}} response)
        {
            mock.Setup(_ => _.{{name}}(It.Is<{{input.name}}>(match), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()))
                .Returns(response);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}CallThrowsException(this Mock<{{grpcClient}}> mock, Exception exception = null)
        {
            if (exception is null) exception = new RpcException(Status.DefaultCancelled);
            mock.Setup(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()))
                .Throws(exception);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}CallWithCallOptions(this Mock<{{grpcClient}}> mock, {{output.name}} response)
        {
            mock.Setup(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<CallOptions>()))
                .Returns(response);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}CallWithCallOptions(this Mock<{{grpcClient}}> mock, Func<{{input.name}}, {{output.name}}> valueFunction)
        {
            mock.Setup(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<CallOptions>()))
                .Returns(({{input.name}} request, CallOptions options) => valueFunction(request));
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}CallWithCallOptions(this Mock<{{grpcClient}}> mock, System.Linq.Expressions.Expression<System.Func<{{input.name}}, bool>> match, {{output.name}} response)
        {
            mock.Setup(_ => _.{{name}}(It.Is<{{input.name}}>(match), It.IsAny<CallOptions>()))
                .Returns(response);
            return mock;
        }

        public static Mock<{{grpcClient}}> Setup{{name}}CallThrowsExceptionWithCallOptions(this Mock<{{grpcClient}}> mock, Exception exception = null)
        {
            if (exception is null) exception = new RpcException(Status.DefaultCancelled);
            mock.Setup(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<CallOptions>()))
                .Throws(exception);
            return mock;
        }

        public static Moq.Language.ISetupSequentialResult<{{output.name}}> SetupSequence{{name}}Call(this Mock<{{grpcClient}}> mock)
        {
            return mock.SetupSequence(_ => _.{{name}}(It.IsAny<{{input.name}}>(), It.IsAny<Metadata>(), It.IsAny<System.DateTime?>(), It.IsAny<CancellationToken>()));
        }
        {{/if}}
        {{/each}}
        {{#each outputTypes}}
        {{#if isStream}}

        public static Moq.Language.ISetupSequentialResult<AsyncServerStreamingCall<{{output.name}}>> Returns(this Moq.Language.ISetupSequentialResult<AsyncServerStreamingCall<{{output.name}}>> sequence, params {{output.name}}[] response)
        {
            var adapter = new AsyncStreamAdapter<{{output.name}}>(response.ToAsyncEnumerable().GetAsyncEnumerator());
            var fakeCall = TestCalls.AsyncServerStreamingCall(adapter, System.Threading.Tasks.Task.FromResult(new Metadata()), () => Status.DefaultSuccess, () => new Metadata(), () => { });
            return sequence.Returns(fakeCall);
        }

        public static Moq.Language.ISetupSequentialResult<AsyncServerStreamingCall<{{output.name}}>> ThrowsException(this Moq.Language.ISetupSequentialResult<AsyncServerStreamingCall<{{output.name}}>> sequence, Exception exception = null)
        {
            if (exception == null) exception = new RpcException(Status.DefaultCancelled);
            return sequence.Throws(exception);
        }
        {{else}}

        public static Moq.Language.ISetupSequentialResult<AsyncUnaryCall<{{output.name}}>> Returns(this Moq.Language.ISetupSequentialResult<AsyncUnaryCall<{{output.name}}>> sequence, {{output.name}} response)
        {
            var fakeCall = TestCalls.AsyncUnaryCall(System.Threading.Tasks.Task.FromResult(response), System.Threading.Tasks.Task.FromResult(new Metadata()), () => Status.DefaultSuccess, () => new Metadata(), () => { });
            return sequence.Returns(fakeCall);
        }

        public static Moq.Language.ISetupSequentialResult<AsyncUnaryCall<{{output.name}}>> ThrowsException(this Moq.Language.ISetupSequentialResult<AsyncUnaryCall<{{output.name}}>> sequence, Exception exception = null)
        {
            if (exception == null) exception = new RpcException(Status.DefaultCancelled);
            return sequence.Throws(exception);
        }

        public static Moq.Language.ISetupSequentialResult<{{output.name}}> Returns(this Moq.Language.ISetupSequentialResult<{{output.name}}> sequence, {{output.name}} response)
        {
            return sequence.Returns(response);
        }

        public static Moq.Language.ISetupSequentialResult<{{output.name}}> ThrowsException(this Moq.Language.ISetupSequentialResult<{{output.name}}> sequence, Exception exception = null)
        {
            if (exception == null) exception = new RpcException(Status.DefaultCancelled);
            return sequence.Throws(exception);
        }
        {{/if}}
        {{/each}}
    }
}